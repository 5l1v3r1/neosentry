<?php //functions.php
//mysql uses port 3307
//mssql uses port 1433
//the firewall will need to allow this connection from 127.0.0.1

ini_set('display_errors', 1); 
error_reporting(E_ALL);

date_default_timezone_set('America/New_York');

$appname = 'qNMS';
$globalErrorVar = '';

//The following variables get autogenerated when setup.sh is run
//Encryption Variables
$secret_iv = '11LHyPZ8VC7JAq+1bUX78+pv4C1yvYciv0N00LwKK7U';
$secret_key = 'oi/fCjQVQeRMo3CzXjUk+cdNhcF/Oyh159qFoZkcYhE';
//End Encryption Variables
//Database Connection Variables
$dbhost = 'localhost';
$dbname = 'qnmsdb';
$dbuser = 'qnmsuser';
$dbpass = 'X2GX1!Me1KhopGBz';
//End Database Connection Variables

if ($dbname=='' || $dbname=='%dbname%') {
    echo 'Please run setup.sh as root to initialize the database and set up this instance.';
    exit;
    die('Please run _setup.sh as root to initialize the database and set up this instance.');
}

//global variables
$dataFolder = realpath("../data");
$settingsFile = realpath("$dataFolder/settings.json");
$snmpmapFile = realpath("$dataFolder/snmpmap.json");
$devicesFile = realpath("$dataFolder/devices.json");
$logFolder = realpath("$dataFolder/logs");
$scandataFolder = realpath("$dataFolder/scandata");
$mibsFolder = realpath("$dataFolder/mibs");
$backupsFolder = realpath("$dataFolder/backups");

/*
$baseUrl = "http://localhost/qnms";
$image_thumb_width = 200;
$user = "";
$loggedin = false;
 */

//cron job variables: [minute 0-59] [hour 0-23] [day 1-31] [month 1-12] [day-of-week 0-7 (0=sunday)]
$phpBin = trim(`which php`); //"/usr/bin/php";
$curlBin = trim(`which curl`); //"/usr/bin/curl";
$wgetBin = trim(`which wget`); //"/usr/bin/wget";
$cron_file = "$dataFolder/qnms_crontab"; //"/etc/cron.d/quicknms";
$mibLocation = "$dataFolder/mibs"; //default is /usr/share/snmp/mibs but its write protected
$snmpCommandsFile = "$dataFolder/snmp_commands";
$pingInterval = "*/5 * * * *"; //ping every minute
$trInterval = "0 0 */1 * *"; //traceroute every day at midnight
$snmpNetInterval = "0 */10 * * *"; //get snmp network information every hour
$snmpSysInterval = "0 */10 * * *"; //get snmp hardware information every hour
$snmpAllInterval = "0 1 */1 * *"; //get all snmp information every day at 1am
$serviceInterval = "0 */1 * * *"; //get service information every hour


//MySQL Stuff
//$mySQL_DateTime = date("Y-m-d H:i:s");

//Changing a password:
//SET PASSWORD FOR 'root'@'localhost' = PASSWORD('MySQL1234!');

//A good sql reference:  http://www.pantz.org/software/mysql/mysqlcommands.html
//initial setup, to be run as the root
//CREATE DATABASE dom;
//CREATE USER 'username'@'localhost' IDENTIFIED BY 'SecondTreatise0F';
//USE dom
//GRANT SELECT,INSERT,UPDATE,DELETE ON dom.* to 'username'@'localhost'


//mysql_connect($dbhost, $dbuser, $dbpass) or die(mysql_error());
$mysqli = new mysqli($dbhost, $dbuser, $dbpass, $dbname);
if ($mysqli->connect_errno) {
    printf("MySql Connect Failed: (%s) %s\n", $mysqli->connect_errno, $mysqli->connect_error);
    exit();
	//$mysqli->close(); //close the connection
}




function cleanSqlString($string) {
	global $mysqli;
	return $mysqli->real_escape_string($string);
}
function closeSql() {
	global $mysqli;
	$mysqli->close();
}
function createTable($name, $query) {
	if (tableExists($name)) {
		echo "Table '$name' already exists<br />";
	} else {
		$result = queryMysql("CREATE TABLE $name($query)");
		if (!queryMysql("CREATE TABLE $name($query)")) {
			echo "Error creating table '$name': ".$mysqli->error;
		} else {
			echo "Table '$name' created<br />";
		}
	}
}

function tableExists($name) {
	$result = queryMysql("SHOW TABLES LIKE '$name'");
	return $result->num_rows;
}

function queryMysql($query) {
	global $mysqli;
	//$result = mysql_query($query) or die(mysql_error());
	$result = $mysqli->query($query);
	if (!$result) {
		$result = "ERROR: (" . $mysqli->errno . ") " .$mysqli->error;
	} else {
		if (strtolower(substr($query,6))=="delete") $result = "Deleted ".$mysqli->affected_rows." Rows: ".$mysqli->info();
		elseif (strtolower(substr($query,6))=="update") $result = "Updated ".$mysqli->affected_rows." Rows: ".$mysqli->info();
		elseif (strtolower(substr($query,6))=="insert") $result = "Inserted ".$mysqli->affected_rows." Rows: ".$mysqli->info();
		
	}
	return $result;
}

function getSqlArray($query) {
	$result = queryMysql($query);
	$retarr = array();

	while ($row = $result->fetch_assoc())
		$retarr[] = $row;
	
	$result->free();
	return $retarr;
}
function getSqlValue($query) { 
	global $mysqli;
	//gets the first value in the result
	//$result = queryMysql($query);
	$result = $mysqli->query($query);
	if (!$result) {
		return "";
	} else {
		$row = $result->fetch_row();
		$result->free();
		return $row[0];
	}
}

function destroySession() {
	$_SESSION=array();
	
	if (session_id() != "" || isset($COOKIE[session_name()]))
		setcookie(session_name(), '', time()-2592000, '/');
		
	session_destroy();
}

function sanitizeString($var) {
	$var = strip_tags($var);
	$var = htmlentities($var); //prevents XSS when displaying text in HTML
	$var = stripslashes($var); //removes \ from the text, \\ becomes \
	return cleanSqlString($var); //turns returns into \r\n, and a few other character replacements
}

// FOR LOGGING INFORMATION //
function writeLogFile($fileName, $line) {
    //First make sure we have a log file to write to
    global $logFolder;
    $logFile = "$logFolder/$fileName";
    if (!file_exists($logFolder)) mkdir($logFolder);
    if (!file_exists($logFile)) touch($logFile);
    
    //now write the output and display it on the console
    $output = date("F j, Y, g:i a").":\t$line\n";
    echo $output;
    file_put_contents($logFile,$output,FILE_APPEND);

}
function writeLog($category, $device, $data) {
	//make the data safe for sql
	$category = cleanSqlString(trim(strtolower($category))); 
	$device = cleanSqlString(trim(strtolower($device))); 
	$data = cleanSqlString(trim($data)); 
	
	//Insert into SQL
	$retval = queryMysql("INSERT INTO log (type, device, value) VALUES('$category','$device','$data');");
	
	//check for alerts (from .checkalerts.php)
	//checkAlerts($device, $category, $data);
	
	//for testing
	//echo "<p>LOG: $date: $category - $device - $data</p>";
	
	return $retval;
}

function writeChangeLog($category, $device, $text, $beforeChange, $afterChange) {
	return writeLog($category, $device, $text."<br><br><table><tr><td>Before</td><td>After</td></tr><tr><td><pre>$beforeChange</pre></td><td><pre>$afterChange</pre></td></tr></table>");
}

function compareArrays($oldTable, $newTable, $uniqueColumn, $logColumns, $device, $logGroup, $deleteFromTable) {
	//usage: compareArrays($oldArr, $newArr, "ifIndex", array('col1','col2',..), "10.11.12.13", "interface", "device_iftable");
	
	$removedEntries = $addedEntries = $changedEntries = "";
	echo date("Y-m-d H:i:s").": Logging any changes. Old Table had ".count($oldTable)." Rows. New table has ".count($newTable)." Rows.\n";
	
	//flatten the unique column for easy comparing
	$oldFlatIndex = $newFlatIndex = "";
	foreach ($oldTable as $i) $oldFlatIndex .= "(".getArrayVal($i,$uniqueColumn).")";
	foreach ($newTable as $i) $newFlatIndex .= "(".getArrayVal($i,$uniqueColumn).")";
	
	//see if any rows were REMOVED\
	foreach($oldTable as $row) {
	//for ($a=0;$a<count($oldTable);$a++) {
		$oldIndx = getArrayVal($row,$uniqueColumn);
		
		if (strpos($newFlatIndex,"(".$oldIndx.")")===false) {
			//this index was REMOVED
			$removedEntries .= "<tr><td>".getArrayVal($row,$uniqueColumn)."</td>";
			foreach ($logColumns as $lc) $removedEntries .= "<td>".getArrayVal($row,$lc)."</td>";
			$removedEntries .= "</tr>";
			echo "$uniqueColumn ".$oldIndx." was REMOVED\n";
			
			//delete from sql if specified
			if ($deleteFromTable != "") queryMySql("DELETE FROM $deleteFromTable WHERE device='$device' AND $uniqueColumn = $oldIndx;");
		}
	}
	if ($removedEntries != "") $removedEntries = "<table><tr><td>$uniqueColumn</td><td>".implode("</td><td>",$logColumns)."</td></tr>$removedEntries</table>";
	
	//see if any rows were ADDED
	foreach($newTable as $row) {
	//for ($a=0;$a<count($newTable);$a++) {
		$newIndx = getArrayVal($row,$uniqueColumn);
		
		if (strpos($oldFlatIndex,"(".$newIndx.")")===false) {
			//this index was ADDED
			$addedEntries .= "<tr><td>".getArrayVal($row,$uniqueColumn)."</td>";
			foreach ($logColumns as $lc) $addedEntries .= "<td>".getArrayVal($row,$lc)."</td>";
			$addedEntries .= "</tr>";
			echo "$uniqueColumn ".$newIndx." was ADDED\n";
		}
	}
	if ($addedEntries != "") $addedEntries = "<table><tr><td>$uniqueColumn</td><td>".implode("</td><td>",$logColumns)."</td></tr>$addedEntries</table>";
	
	
	//see if any rows CHANGED
	$monitorColumns = $logColumns;
	foreach($newTable as $header => $val) {
	//for ($a=0; $a < count($newTable); $a++) {
		if (array_key_exists($header,$oldTable)) {
			$row = ""; $hasChanged = false;
			foreach ($monitorColumns as $mc) {
				$oldVal = getArrayVal($oldTable[$header],$mc); $newVal = getArrayVal($val,$mc);
				if ($oldVal != "" && $newVal != $oldVal) {
					$hasChanged = true;
					$row .= "<td>'$oldVal' -> '<b>$newVal</b>'</td>";
					echo "Value CHANGED from '$oldVal' to '$newVal' on $uniqueColumn ".$val[$uniqueColumn]."\n";
				} else $row .= "<td></td>";
			}
			if ($hasChanged) $changedEntries .= "<tr><td>".$val[$uniqueColumn]."</td>$row</tr>";
		}
	}
	if ($changedEntries != "") $changedEntries = "<table><tr><td>$uniqueColumn</td><td>".implode("</td><td>",$monitorColumns)."</td></tr>$changedEntries</table>";
	
	//write to the log file
	if ($removedEntries !="") writeLog($logGroup,$device,"The following $logGroup rows have been REMOVED:<br><br>".trim($removedEntries));
	if ($addedEntries !="") writeLog($logGroup,$device,"The following $logGroup rows have been ADDED:<br><br>".trim($addedEntries));
	if ($changedEntries != "") writeLog($logGroup,$device, "The following $logGroup rows have CHANGED:<br><br>".trim($changedEntries));
	
}

// DEVICE MANAGEMENT FUNCTIONS //
//TABLE: devicelist.  COLUMNS: country, site, objtype, devicename, ip, monitorsnmp, monitorports, snmpcommunity
function addDevice($sCountry, $sSite, $sObjtype, $sDevicename, $sIp, $sSnmp, $sPorts, $sSnmpCommunity) {
	//make the data safe for sql
	$sCountry = cleanSqlString($sCountry); $sSite = cleanSqlString($sSite); $sObjtype = cleanSqlString($sObjtype); 
	$sDevicename = cleanSqlString($sDevicename); $sIp = cleanSqlString($sIp); $sSnmp = cleanSqlString($sSnmp); 
	$sPorts = cleanSqlString($sPorts); $sSnmpCommunity = cleanSqlString($sSnmpCommunity);	
	
	//Add new device
	$qry = "INSERT INTO devicelist (country, site, objtype, devicename, ip, monitorsnmp, monitorports, snmpcommunity) 
					   VALUES('$sCountry','$sSite','$sObjtype','$sDevicename','$sIp','$sSnmp','$sPorts','$sSnmpCommunity');";
	if (trim($sSnmpCommunity) == "") {
		$qry = "INSERT INTO devicelist (country, site, objtype, devicename, ip, monitorsnmp, monitorports) 
					   VALUES('$sCountry','$sSite','$sObjtype','$sDevicename','$sIp','$sSnmp','$sPorts');";
	}
	$retval = queryMysql($qry);
	//ECHO "INSERT Query: $qry<br>Returned $retval<br>";

	//update device if the insert failed
	if ($retval != 1) {
		$qry = "UPDATE devicelist SET country='$sCountry', site='$sSite', objtype='$sObjtype', devicename='$sDevicename', ip='$sIp', 
						monitorsnmp='$sSnmp', monitorports='$sPorts', snmpcommunity='$sSnmpCommunity' 
						WHERE ip='$sIp'";
		if (trim($sSnmpCommunity) == "") {
			$qry = "UPDATE devicelist SET country='$sCountry', site='$sSite', objtype='$sObjtype', devicename='$sDevicename', ip='$sIp', 
						monitorsnmp='$sSnmp', monitorports='$sPorts' 
						WHERE ip='$sIp'";
		}
		$retval = queryMysql($qry);
		//ECHO "UPDATE Query: $qry<br>Returned $retval<br>";
	}
	
	return $retval;
}

//each ip is separated by a space
function removeDevices($validIPList) {
	$qry = "DELETE FROM devicelist WHERE ip != '".str_replace(" ","' AND ip != '",trim($validIPList))."';";
	//for ($x=0;$x<count($iplst);$x++)
	//	$qry .= "ip != '".$iplst[$x]."' AND ";
	//$qry = rtrim($qry," AND ").";";
	$ret = queryMysql($qry);
	//ECHO "DELETE query: $qry<br>Returned: $ret<br>";
	return $ret;
}


// DEVICE RETRIEVAL FUNCTIONS //

function getDevicesArray($whereStatement) {
	return getDevicesArrayWithOrder($whereStatement, "country,site,objtype,devicename ASC");
}
function getDevicesArrayWithOrder($whereStatement, $orderBy) {
	return getSqlArray("select * from devicelist $whereStatement ORDER BY $orderBy;");
}
function getDevice($ipAddr) {
	return getDevicesArray("WHERE ip='$ipAddr'");
}

// READ AND WRITE SETTING INFO //
function encryptString($string) {
    // for more advanced encryption. install libsodium PECL, top rated encryption package
    // https://paragonie.com/book/pecl-libsodium/read/00-intro.md#what-is-libsodium
    
    $output = false;

    $encrypt_method = "AES-256-CBC";
    global $secret_key;
    global $secret_iv;

    // key - hash the secret key
    $key = hash('sha256', $secret_key);
    
    // iv - encrypt method AES-256-CBC expects 16 bytes - else you will get a warning
    $iv = substr(hash('sha256', $secret_iv), 0, 16);

    //encrypt the string
    $output = openssl_encrypt($string, $encrypt_method, $key, 0, $iv);
    $output = base64_encode($output);
    return $output;
}
function decryptString($string){
    
    $output = false;

    $encrypt_method = "AES-256-CBC";
    global $secret_key;
    global $secret_iv;

    // key - hash the secret key
    $key = hash('sha256', $secret_key);
    
    // iv - encrypt method AES-256-CBC expects 16 bytes - else you will get a warning
    $iv = substr(hash('sha256', $secret_iv), 0, 16);

    // decrypt the string
    $output = openssl_decrypt(base64_decode($string), $encrypt_method, $key, 0, $iv);
    return $output;
}
function hashString($string){
    /* SHA512 = crypt('rasmuslerdorf', '$6$rounds=5000$usesome16CHARsalt$') //up to 999,999,999 rounds
     * SHA256 = crypt('rasmuslerdorf', '$5$rounds=5000$usesome16CHARsalt$')
     * BlowFish = crypt('rasmuslerdorf', '$2a$07$usesomesillystringforsalt$')
     * MD5 = crypt('rasmuslerdorf', '$1$rasmusle$')
     * 
     * Hash a password with old hash to compare passwords.
     *  hash_equals($hashed_password, crypt($user_input, $hashed_password))
     * 
     * USE THESE BUILT-IN FUNCTIONS INSTEAD OF hashString(). THIS SERVES ONLY AS A PLACEHOLDER
     *  password_hash('mypass'); will hash with the best current standard
     *  password_verify('mypass', $hash); will verify a password hashes match, using the same algorithm
     * 
     */
    return password_hash($string);
}
function getSettingsArray() {
    global $settingsFile;
    return json_decode(file_get_contents($settingsFile));
}
function getSettingValue($section, $settingName) {
    //SQL.  Clean and retrieve.
    //$settingName = cleanSqlString(trim(strtolower($settingName))); 
    //return getSqlValue("select value from settings where name='$settingName';");
    
    //JSON
    global $settingsFile;
    $arrSettings = json_decode(file_get_contents($settingsFile));
    return $arrSettings[$section][$settingName];
    
}
function writeSettingValue($section, $settingName, $settingValue) {
    /* SQL.
    global $mysqli;
    $settingName = cleanSqlString(trim(strtolower($settingName))); 
    $settingValue = cleanSqlString(trim($settingValue));

    //UPDATE the setting entry
    $retval = queryMysql("UPDATE settings SET value='$settingValue' WHERE name='$settingName';");
    if ($mysqli->affected_rows == 0) {//INSERT if no update was made
            $retval = queryMysql("INSERT INTO settings (name, value) VALUES('$settingName','$settingValue');");
    }
    return $retval;
     */
    
    //JSON
    global $settingsFile;
    $arrSettings = json_decode(file_get_contents($settingsFile));
    $arrSettings[$section][$settingName] = $settingValue;
    return file_put_contents($settingsFile, json_encode($arrSettings));
}


// ALERTING AND EMAILING //

function sendMail($to, $subject, $body) {
    require_once 'phpmailer/PHPMailerAutoload.php';
    
    $strTo = "";
    $arrSettings = getSettingsArray();
    $mail = new PHPMailer;

    //$mail->SMTPDebug = 3;                                 // Enable verbose debug output

    $mail->isSMTP();                                        // Set mailer to use SMTP
    $mail->Host = $arrSettings["Mail Settings"]["Host"];    // Specify main and backup SMTP servers
    $mail->SMTPAuth = $arrSettings["Mail Settings"]["SMTPAuth"];    // Enable SMTP authentication
    $mail->Username = $arrSettings["Mail Settings"]["Username"];    // SMTP username
    $mail->Password = $arrSettings["Mail Settings"]["Password"];    // SMTP password
    $mail->SMTPSecure = $arrSettings["Mail Settings"]["Security"];  // Enable 'tls' or 'ssl'
    $mail->Port = $arrSettings["Mail Settings"]["Port"];    // TCP port to connect to

    $mail->setFrom($arrSettings["Mail Settings"]["From"]);
    
    if (is_array($to)) {                                    // Add a recipient
        foreach ($to as $value) {
            $mail->addAddress($value);
            $strTo .= $value.";";
        }
    } else {
        $mail->addAddress($to);
        $strTo = $to.";";
    }
    //$mail->addReplyTo('info@example.com', 'Information');
    //$mail->addCC('cc@example.com');
    //$mail->addBCC('bcc@example.com');

    //$mail->addAttachment('/var/tmp/file.tar.gz');         // Add attachments
    //$mail->addAttachment('/tmp/image.jpg', 'new.jpg');    // Optional name
    $mail->isHTML(true);                                    // Set email format to HTML

    $mail->Subject = $subject;
    $mail->Body    = $body;
    $mail->AltBody = strip_tags($body);                     //non-html alternative for non-html mail clients
    
    $msg = 'Message has been sent to '.$strTo." Subject: $subject";
    if(!$mail->send()) {
        $msg = 'Error: Message could not be sent. ' . $mail->ErrorInfo;
    }
    
    echo $msg;
    writeLogFile('email.log',$msg);
    return $msg;
    
}

?>